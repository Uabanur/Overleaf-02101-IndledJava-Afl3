%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 20 118 575 673
%%Creator: FreeHEP Graphics2D Driver
%%Producer: com.maplesoft.mathdoc.view.plot.paint.PlotPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Friday, November 18, 2016 4:44:32 PM CET
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Draw a line. (x0 y0 x1 y1 line)
/L {bias n m l S unbias} def

% Polyline primitive.
/polyline  {n m 1 exch 1 exch
           {pop currentfile token pop currentfile token pop l} for
           } def

% Draw a polyline (n x0 y0 OPL x1 y1 x2 y2 ... ... xn yn)
/OPL {bias polyline S unbias} def

% Draw a closed polyline (n x0 y0 CPL x1 y1 x2 y2 ... ... xn yn)
/CPL {bias polyline s unbias} def

% Draw a filled polyline (n x0 y0 FPL x1 y1 x2 y2 ... ... xn yn)
/FPL {polyline h f*} def

% Draw an oval. (x y w h OVL)
/OVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width currentlinewidth sub 2 div
      height currentlinewidth sub 2 div neg
      scale n 0 0 1 5 -2 roll arc
      smatrix setmatrix S} def

% Draw a filled oval. (x y w h FOVL)
/FOVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width 2 div
      height 2 div neg
      scale n 0 0 m 0 0 1 5 -2 roll arc
      h smatrix setmatrix f} def

% Draw a rounded rectangle. (x y w h arcwidth archeight RREC)
/RREC {matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      s} def

% Draw a filled rounded rectangle. (x y w h arcwidth archeight FRREC)
/FRREC{matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      h f} def

% Draw a string.  (string x y STR)
/STR {q m 1 -1 scale recshow Q} def

% Define basic plot symbols.
/xys   {/siz exch def /yv exch def /xv exch def} def
/hline {xys n xv siz 2. div sub yv m siz 0 rlineto S} def
/vline {xys n xv yv siz 2. div sub m 0 siz rlineto S} def
/plus  {xys n xv yv siz 2. div sub m 0 siz rlineto
                    xv siz 2. div sub yv m siz 0 rlineto S} def
/dot   {n 2. div 0 360 arc s} def
/fdot  {n 2. div 0 360 arc h f} def
/box   {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                    siz 2 sqrt div dup rs} def
/fbox  {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                       siz 2 sqrt div dup rf} def
/tridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto s} def
/ftridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto h f} def

% Symbols defined in terms of the others.
/star     {3 copy cross plus} def
/cross    {xys q xv yv translate 45 rotate 0 0 siz plus Q} def
/diamond  {xys q xv yv translate 45 rotate 0 0 siz box Q} def
/fdiamond {xys q xv yv translate 45 rotate 0 0 siz fbox Q} def
/triup    {xys q xv yv translate 180 rotate 0 0 siz tridn Q} def
/ftriup   {xys q xv yv translate 180 rotate 0 0 siz ftridn Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Helvetica 16#00 vg&newcompositefont
/DialogInput-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
400 400 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0 0 0 RG
[ 1.00000 0 0 1.00000 0 0 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0 0 m
400.000 0 l
400.000 400.000 l
0 400.000 l
0 0 l
h
f
0 0 0 RG
3.00000 w
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
q
169 365 61 29 rc
q
q
172 368 56 23 rc
q
[ 1.00000 0 0 1.00000 174.000 371.000 ] concat
newpath
0 7.00000 m
34.0000 7.00000 l
S
[ 1.00000 0 0 1.00000 -174.000 -371.000 ] concat
Q
[ 1.00000 0 0 1.00000 172.000 368.000 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
37 0 18 22 rc
newpath
45.4531 7.54687 m
45.3125 8.03125 l
44.2500 8.03125 l
43.4375 11.2343 l
43.0833 12.6406 42.7239 13.7291 42.3593 14.5000  c
41.8489 15.5937 41.2968 16.3489 40.7031 16.7656  c
40.2552 17.0781 39.8072 17.2343 39.3593 17.2343  c
39.0677 17.2343 38.8177 17.1458 38.6093 16.9687  c
38.4635 16.8541 38.3906 16.6979 38.3906 16.5000  c
38.3906 16.3437 38.4531 16.2083 38.5781 16.0937  c
38.7031 15.9791 38.8541 15.9218 39.0312 15.9218  c
39.1666 15.9218 39.2786 15.9635 39.3671 16.0468  c
39.4557 16.1302 39.5000 16.2239 39.5000 16.3281  c
39.5000 16.4322 39.4479 16.5312 39.3437 16.6250  c
39.2708 16.6979 39.2343 16.7500 39.2343 16.7812  c
39.2343 16.8229 39.2500 16.8593 39.2812 16.8906  c
39.3229 16.9218 39.3906 16.9375 39.4843 16.9375  c
39.6927 16.9375 39.9140 16.8724 40.1484 16.7421  c
40.3828 16.6119 40.5885 16.4166 40.7656 16.1562  c
40.9427 15.8958 41.1145 15.5156 41.2812 15.0156  c
41.3437 14.8072 41.5260 14.1302 41.8281 12.9843  c
43.1093 8.03125 l
41.8281 8.03125 l
41.9375 7.54687 l
42.3333 7.54687 42.6119 7.51822 42.7734 7.46093  c
42.9349 7.40364 43.0833 7.29687 43.2187 7.14062  c
43.3541 6.98437 43.5312 6.68750 43.7500 6.25000  c
44.0312 5.66666 44.3072 5.21354 44.5781 4.89062  c
44.9322 4.45312 45.3099 4.12500 45.7109 3.90625  c
46.1119 3.68750 46.4895 3.57812 46.8437 3.57812  c
47.2083 3.57812 47.5026 3.67447 47.7265 3.86718  c
47.9505 4.05989 48.0625 4.26562 48.0625 4.48437  c
48.0625 4.65104 48.0078 4.79427 47.8984 4.91406  c
47.7890 5.03385 47.6458 5.09375 47.4687 5.09375  c
47.3125 5.09375 47.1875 5.04947 47.0937 4.96093  c
47.0000 4.87239 46.9531 4.76562 46.9531 4.64062  c
46.9531 4.55729 46.9843 4.45833 47.0468 4.34375  c
47.1093 4.22916 47.1406 4.15625 47.1406 4.12500  c
47.1406 4.05208 47.1197 4.00000 47.0781 3.96875  c
47.0156 3.91666 46.9218 3.89062 46.7968 3.89062  c
46.4947 3.89062 46.2187 3.98958 45.9687 4.18750  c
45.6458 4.44791 45.3541 4.85416 45.0937 5.40625  c
44.9583 5.68750 44.7187 6.40104 44.3750 7.54687  c
45.4531 7.54687 l
h
f
newpath
47.3281 12.0468 m
51.2812 12.0468 l
51.2812 12.2500 l
46.8281 20.1406 l
46.3593 19.9218 l
50.2500 12.9843 l
48.3750 12.9843 l
47.8541 12.9843 47.4974 13.0312 47.3046 13.1250  c
47.1119 13.2187 46.8906 13.4427 46.6406 13.7968  c
46.4062 13.7968 l
47.3281 12.0468 l
h
f
Q
cliprestore
newpath
0 0 m
0 23.0000 l
56.0000 23.0000 l
56.0000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 172.000 368.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 -172.000 -368.000 ] concat
cliprestore
newpath
169.000 365.000 m
169.000 394.000 l
230.000 394.000 l
230.000 365.000 l
h
W
Q
Q
1.00000 w
2 J
0 j
newpath
170.500 366.500 m
227.500 366.500 l
227.500 391.500 l
170.500 391.500 l
170.500 366.500 l
h
S
3.00000 w
0 J
1 j
Q
0 0 400 400 rc
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
cliprestore
q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 0 390 357 rc
1.00000 w
2 J
0 j
0 J
1 j
q
Q
2 J
0 j
0 J
1 j
q
Q
2 J
0 j
3.00000 w
0 J
1 j
q
q
9.00000 43.1214 379.496 312.878 rc
newpath
12.0000 275.887 m
12.1224 293.245 l
12.2448 309.147 l
12.3672 323.138 l
12.4896 334.802 l
12.7344 349.822 l
12.9792 352.443 l
13.2240 342.538 l
13.4688 321.602 l
13.5912 307.823 l
13.7136 292.382 l
13.8360 275.717 l
13.9584 258.264 l
14.0649 242.762 l
14.1714 227.231 l
14.2779 211.898 l
14.3844 196.959 l
14.5974 168.879 l
14.8104 143.902 l
15.0234 122.456 l
15.2364 104.583 l
15.4494 90.0580 l
15.6624 78.5027 l
16.6206 52.0230 l
17.5788 47.1337 l
18.5433 50.1034 l
19.5078 54.1710 l
19.7478 54.8149 l
19.9878 55.2258 l
20.2278 55.3859 l
20.4678 55.2919 l
20.9477 54.3974 l
21.4277 52.7725 l
22.3177 49.1404 l
23.2077 47.1277 l
24.1292 49.9176 l
25.0508 62.0281 l
25.5273 74.2353 l
26.0038 92.1802 l
26.2421 103.695 l
26.4803 117.054 l
26.7186 132.294 l
26.9569 149.368 l
27.1944 168.063 l
27.4319 188.172 l
27.6694 209.316 l
27.9069 231.011 l
28.1444 252.681 l
28.3819 273.685 l
28.6194 293.360 l
28.8569 311.055 l
29.3455 338.815 l
29.8341 352.082 l
30.3226 349.663 l
30.8112 332.973 l
31.2416 309.114 l
31.6720 279.746 l
31.8871 263.932 l
32.1023 247.825 l
32.3175 231.724 l
32.5327 215.890 l
32.7749 198.650 l
33.0171 182.257 l
33.2594 166.882 l
33.5016 152.635 l
33.9861 127.707 l
34.4706 107.452 l
35.4435 78.9343 l
36.4164 62.3624 l
37.3540 53.5407 l
38.2916 49.0448 l
38.7173 47.9740 l
39.1431 47.3609 l
39.3559 47.2011 l
39.5688 47.1279 l
39.7816 47.1343 l
39.9945 47.2136 l
41.0069 48.4211 l
42.0194 50.6615 l
43.7347 55.8682 l
45.7300 62.8481 l
47.4962 68.9306 l
49.4340 74.8841 l
51.2793 79.5650 l
53.2046 83.3108 l
54.9727 85.7237 l
55.9262 86.6286 l
56.8797 87.2641 l
57.8702 87.6461 l
58.8607 87.7516 l
59.7229 87.6230 l
60.5851 87.2930 l
61.5163 86.7139 l
62.4475 85.9072 l
64.3715 83.5348 l
66.2538 80.3270 l
68.0750 76.4479 l
70.0972 71.3737 l
71.9142 66.3139 l
73.8542 60.6984 l
75.6122 55.7902 l
77.5341 51.1532 l
78.4383 49.4261 l
79.3424 48.1088 l
79.8150 47.6180 l
80.2876 47.2851 l
80.5239 47.1839 l
80.7601 47.1299 l
80.9964 47.1260 l
81.2327 47.1754 l
81.4637 47.2785 l
81.6947 47.4393 l
81.9257 47.6615 l
82.1568 47.9494 l
82.6188 48.7404 l
83.0808 49.8532 l
84.0482 53.4545 l
85.0156 59.2942 l
85.9473 67.8265 l
86.8790 80.2406 l
87.8318 98.2429 l
88.7846 122.972 l
89.2570 138.062 l
89.7295 155.095 l
90.2020 174.009 l
90.6744 194.617 l
91.1086 214.762 l
91.5427 235.671 l
91.9768 256.838 l
92.4110 277.640 l
92.9085 300.104 l
93.4061 319.966 l
93.9037 336.032 l
94.4013 347.202 l
94.6238 350.369 l
94.8463 352.316 l
94.9576 352.818 l
95.0688 352.999 l
95.1244 352.968 l
95.1801 352.857 l
95.2357 352.663 l
95.2913 352.389 l
95.7364 347.262 l
96.1814 337.064 l
96.6559 321.077 l
97.1304 300.620 l
97.6049 276.769 l
98.0794 250.751 l
98.5335 224.980 l
98.9877 199.414 l
99.4419 174.944 l
99.8960 152.268 l
100.400 129.762 l
100.904 110.393 l
101.408 94.2160 l
101.913 81.0738 l
102.786 64.5925 l
103.659 54.4724 l
104.155 50.9063 l
104.651 48.6076 l
104.898 47.8752 l
105.146 47.3963 l
105.394 47.1561 l
105.642 47.1428 l
106.545 48.8812 l
107.449 53.2444 l
109.425 71.2012 l
111.130 93.8346 l
113.073 121.617 l
114.949 143.319 l
115.886 150.557 l
116.823 154.905 l
117.057 155.521 l
117.290 155.948 l
117.524 156.188 l
117.757 156.242 l
117.991 156.110 l
118.224 155.794 l
118.458 155.299 l
118.691 154.625 l
119.589 150.453 l
120.486 143.984 l
122.426 124.002 l
124.274 101.178 l
126.220 78.4474 l
127.982 62.4173 l
129.928 51.3154 l
130.861 48.4775 l
131.793 47.1998 l
132.025 47.1247 l
132.258 47.1485 l
132.490 47.2723 l
132.723 47.4980 l
133.188 48.2640 l
133.653 49.4684 l
134.624 53.5339 l
135.596 60.0011 l
136.490 68.4703 l
137.385 79.7386 l
138.301 94.5251 l
139.218 112.801 l
140.229 136.975 l
141.241 164.835 l
142.157 192.392 l
143.073 221.056 l
144.010 250.176 l
144.947 277.665 l
145.900 302.546 l
146.852 323.140 l
147.728 337.559 l
148.604 347.284 l
149.070 350.514 l
149.537 352.406 l
149.654 352.674 l
149.771 352.862 l
149.887 352.970 l
150.004 352.999 l
150.121 352.951 l
150.237 352.825 l
150.354 352.624 l
150.471 352.349 l
151.397 347.657 l
152.323 339.008 l
153.314 326.228 l
154.305 310.733 l
155.180 295.531 l
156.054 279.487 l
157.063 260.561 l
158.072 241.768 l
158.983 225.312 l
159.893 209.589 l
160.794 194.918 l
161.695 181.228 l
163.632 155.282 l
165.578 133.911 l
167.348 118.128 l
169.227 104.617 l
171.062 94.1012 l
173.050 85.0919 l
174.771 78.8988 l
176.747 73.2335 l
178.604 69.0268 l
180.444 65.7050 l
182.285 63.0516 l
184.163 60.9002 l
186.154 59.1119 l
187.979 57.8345 l
189.780 56.8545 l
191.706 56.0674 l
193.628 55.5132 l
195.353 55.1902 l
197.396 55.0036 l
199.106 55.0038 l
201.105 55.1850 l
203.014 55.5480 l
204.718 56.0430 l
206.634 56.8164 l
208.563 57.8634 l
210.483 59.2246 l
212.263 60.8304 l
214.106 62.9192 l
216.012 65.6427 l
217.912 69.0702 l
219.867 73.5351 l
221.588 78.4617 l
223.526 85.4168 l
225.472 94.2976 l
227.347 105.127 l
229.050 117.349 l
231.075 135.475 l
232.790 154.401 l
234.785 181.011 l
235.668 194.405 l
236.552 208.744 l
237.520 225.454 l
238.489 242.991 l
239.412 260.187 l
240.335 277.505 l
241.297 295.207 l
242.260 311.900 l
243.144 325.696 l
244.028 337.360 l
244.982 346.772 l
245.935 352.088 l
246.183 352.704 l
246.430 352.983 l
246.554 352.993 l
246.678 352.914 l
246.802 352.747 l
246.926 352.488 l
247.421 350.535 l
247.916 347.076 l
248.778 337.405 l
249.640 323.186 l
250.572 303.120 l
251.503 278.933 l
252.465 250.791 l
253.427 220.898 l
254.368 191.462 l
255.309 163.233 l
256.220 138.163 l
257.130 116.058 l
258.141 95.4709 l
259.153 79.1331 l
260.061 67.8577 l
260.970 59.4439 l
261.940 53.1718 l
262.910 49.2656 l
263.349 48.1774 l
263.789 47.4787 l
264.008 47.2696 l
264.228 47.1514 l
264.448 47.1227 l
264.668 47.1824 l
265.628 48.4642 l
266.589 51.4039 l
268.398 61.5585 l
270.288 78.5865 l
272.136 100.127 l
274.071 124.018 l
275.934 143.349 l
276.887 150.336 l
277.840 154.741 l
278.076 155.394 l
278.312 155.864 l
278.549 156.149 l
278.785 156.246 l
279.021 156.153 l
279.257 155.868 l
279.494 155.392 l
279.730 154.723 l
280.598 150.625 l
281.466 144.045 l
283.457 121.155 l
285.237 95.6777 l
287.135 70.4473 l
288.951 53.8494 l
289.960 48.8466 l
290.969 47.1214 l
291.842 48.5987 l
292.715 53.4772 l
293.706 64.5545 l
294.698 83.8261 l
295.149 96.0596 l
295.601 110.753 l
296.053 128.012 l
296.505 147.803 l
296.999 172.091 l
297.493 198.580 l
297.987 226.396 l
298.481 254.387 l
298.907 277.650 l
299.334 299.128 l
299.760 317.926 l
300.186 333.248 l
300.672 345.651 l
301.157 352.094 l
301.279 352.738 l
301.400 352.995 l
301.461 352.978 l
301.521 352.865 l
301.582 352.657 l
301.643 352.354 l
301.886 350.207 l
302.128 346.612 l
302.597 335.878 l
303.066 320.802 l
303.535 302.305 l
304.004 281.386 l
304.473 259.052 l
304.942 236.209 l
305.410 213.647 l
305.879 192.002 l
306.346 171.816 l
306.813 153.311 l
307.280 136.655 l
307.747 121.898 l
308.644 98.6763 l
309.541 81.4458 l
310.511 68.2359 l
311.481 59.2838 l
312.406 53.6544 l
313.330 50.0955 l
313.817 48.8660 l
314.303 48.0000 l
314.546 47.6877 l
314.789 47.4486 l
315.033 47.2779 l
315.276 47.1712 l
315.496 47.1263 l
315.716 47.1277 l
315.936 47.1728 l
316.157 47.2592 l
316.597 47.5471 l
317.037 47.9751 l
318.011 49.3475 l
318.984 51.2009 l
320.849 55.6980 l
322.709 60.8927 l
324.651 66.5151 l
326.441 71.4876 l
328.274 76.1044 l
330.297 80.4332 l
332.129 83.5422 l
334.003 85.8621 l
334.955 86.6961 l
335.908 87.2918 l
336.784 87.6259 l
337.659 87.7522 l
338.593 87.6539 l
339.526 87.3100 l
340.453 86.7205 l
341.379 85.8775 l
343.361 83.1949 l
345.110 79.8024 l
347.128 74.6966 l
348.949 69.0968 l
350.751 62.9006 l
352.688 56.1128 l
354.633 50.2610 l
355.518 48.3687 l
356.403 47.2727 l
356.638 47.1544 l
356.873 47.1224 l
357.108 47.1851 l
357.343 47.3521 l
357.813 48.0437 l
358.283 49.3019 l
359.200 53.9452 l
360.117 62.8488 l
361.112 80.2858 l
362.106 110.524 l
362.536 128.950 l
362.966 151.076 l
363.396 176.923 l
363.826 206.086 l
364.073 223.977 l
364.320 242.363 l
364.567 260.879 l
364.814 279.086 l
365.061 296.480 l
365.308 312.507 l
365.555 326.592 l
365.802 338.163 l
366.035 346.273 l
366.267 351.315 l
366.383 352.591 l
366.499 352.999 l
366.615 352.522 l
366.731 351.148 l
367.196 336.793 l
367.660 309.551 l
367.890 292.252 l
368.120 273.131 l
368.350 252.781 l
368.580 231.805 l
368.810 210.783 l
369.040 190.244 l
369.270 170.636 l
369.500 152.312 l
369.730 135.514 l
369.960 120.407 l
370.190 107.053 l
370.420 95.4361 l
370.881 77.0605 l
371.341 64.2654 l
372.280 50.5690 l
373.219 47.1228 l
374.214 49.2767 l
375.209 53.3079 l
375.666 54.6965 l
376.122 55.3587 l
376.350 55.3598 l
376.578 55.1306 l
376.806 54.6780 l
377.034 54.0209 l
377.935 50.1810 l
378.836 47.1955 l
379.799 51.1134 l
380.762 75.2323 l
381.002 87.4491 l
381.242 103.330 l
381.483 123.433 l
381.723 148.079 l
381.843 162.091 l
381.963 177.147 l
382.083 193.128 l
382.203 209.862 l
382.323 227.127 l
382.444 244.644 l
382.564 262.086 l
382.684 279.087 l
382.910 308.525 l
383.137 332.216 l
383.363 347.650 l
383.590 353.000 l
383.816 347.490 l
384.043 331.576 l
384.156 320.184 l
384.269 306.877 l
384.382 291.991 l
384.496 275.887 l
S
cliprestore
newpath
0 0 m
0 357.000 l
390.000 357.000 l
390.000 0 l
h
W
Q
Q
q
1.00000 w
2 J
0 j
q
0 J
1 j
newpath
12.0000 45.1214 m
384.496 45.1214 l
S
Q
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
189 1 19 19 rc
newpath
193.203 16.0000 m
193.328 15.3281 l
193.849 15.3281 194.343 15.2291 194.812 15.0312  c
195.281 14.8333 195.708 14.5364 196.093 14.1406  c
198.296 11.8125 l
196.500 8.67187 l
196.322 8.39062 196.104 8.21614 195.843 8.14843  c
195.583 8.08072 195.197 8.04687 194.687 8.04687  c
194.812 7.37500 l
198.875 7.37500 l
198.750 8.04687 l
198.583 8.04687 198.419 8.08593 198.257 8.16406  c
198.096 8.24218 198.000 8.35937 197.968 8.51562  c
197.958 8.56770 197.968 8.61979 198.000 8.67187  c
199.234 10.8437 l
200.765 9.23437 l
200.953 9.01562 201.062 8.81770 201.093 8.64062  c
201.114 8.48437 201.080 8.34635 200.992 8.22656  c
200.903 8.10677 200.776 8.04687 200.609 8.04687  c
200.734 7.37500 l
204.328 7.37500 l
204.203 8.04687 l
203.682 8.04687 203.184 8.14583 202.710 8.34375  c
202.237 8.54166 201.807 8.83854 201.421 9.23437  c
199.468 11.2812 l
201.437 14.7031 l
201.635 14.9947 201.862 15.1718 202.117 15.2343  c
202.372 15.2968 202.755 15.3281 203.265 15.3281  c
203.140 16.0000 l
199.062 16.0000 l
199.187 15.3281 l
199.343 15.3281 199.505 15.2890 199.671 15.2109  c
199.838 15.1328 199.937 15.0156 199.968 14.8593  c
199.979 14.8072 199.974 14.7552 199.953 14.7031  c
198.546 12.2656 l
196.750 14.1406 l
196.572 14.3281 196.463 14.5260 196.421 14.7343  c
196.390 14.9010 196.419 15.0416 196.507 15.1562  c
196.596 15.2708 196.724 15.3281 196.890 15.3281  c
196.765 16.0000 l
193.203 16.0000 l
h
f
Q
cliprestore
newpath
0 0 m
0 357.000 l
390.000 357.000 l
390.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
0 w
1.00000 w
2 J
0 j
newpath
12.0000 45.1214 m
12.0000 41.1214 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
6 25 10 21 rc
newpath
22.5937 36.5156 m
9.40625 36.5156 l
9.40625 35.4843 l
22.5937 35.4843 l
22.5937 36.5156 l
h
f
Q
newpath
19.9843 42.0000 m
19.9843 41.4687 l
19.9843 41.4479 20.0000 41.4218 20.0312 41.3906  c
23.0468 38.0000 l
23.7239 37.2395 24.2526 36.6224 24.6328 36.1484  c
25.0130 35.6744 25.3463 35.1276 25.6328 34.5078  c
25.9192 33.8880 26.0625 33.2447 26.0625 32.5781  c
26.0625 31.6927 25.8203 30.9349 25.3359 30.3046  c
24.8515 29.6744 24.1770 29.3593 23.3125 29.3593  c
22.7083 29.3593 22.1718 29.5599 21.7031 29.9609  c
21.2343 30.3619 20.9114 30.8697 20.7343 31.4843  c
20.7864 31.4739 20.8645 31.4687 20.9687 31.4687  c
21.1458 31.4687 21.3099 31.5104 21.4609 31.5937  c
21.6119 31.6770 21.7291 31.7942 21.8125 31.9453  c
21.8958 32.0963 21.9375 32.2604 21.9375 32.4375  c
21.9375 32.6041 21.8958 32.7656 21.8125 32.9218  c
21.7291 33.0781 21.6119 33.2005 21.4609 33.2890  c
21.3099 33.3776 21.1458 33.4218 20.9687 33.4218  c
20.6875 33.4218 20.4531 33.3229 20.2656 33.1250  c
20.0781 32.9270 19.9843 32.6979 19.9843 32.4375  c
19.9843 31.9270 20.0755 31.4505 20.2578 31.0078  c
20.4401 30.5651 20.7031 30.1640 21.0468 29.8046  c
21.3906 29.4453 21.7812 29.1718 22.2187 28.9843  c
22.6562 28.7968 23.1250 28.7031 23.6250 28.7031  c
24.3854 28.7031 25.0833 28.8619 25.7187 29.1796  c
26.3541 29.4974 26.8593 29.9505 27.2343 30.5390  c
27.6093 31.1276 27.7968 31.8072 27.7968 32.5781  c
27.7968 33.1718 27.6744 33.7213 27.4296 34.2265  c
27.1849 34.7317 26.8750 35.1953 26.5000 35.6171  c
26.1250 36.0390 25.6171 36.5364 24.9765 37.1093  c
24.3359 37.6822 23.9218 38.0572 23.7343 38.2343  c
21.4375 40.5000 l
23.4843 40.5000 l
24.4114 40.5000 25.1875 40.4921 25.8125 40.4765  c
26.4375 40.4609 26.7656 40.4322 26.7968 40.3906  c
26.9531 40.2239 27.1145 39.6145 27.2812 38.5625  c
27.7968 38.5625 l
27.2812 42.0000 l
19.9843 42.0000 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
105.124 45.1214 m
105.124 41.1214 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
99 25 10 21 rc
newpath
115.593 36.5156 m
102.406 36.5156 l
102.406 35.4843 l
115.593 35.4843 l
115.593 36.5156 l
h
f
Q
newpath
113.906 42.0000 m
113.906 41.3281 l
115.531 41.3281 116.343 41.1197 116.343 40.7031  c
116.343 30.1093 l
115.645 30.4635 114.791 30.6406 113.781 30.6406  c
113.781 29.9843 l
115.364 29.9843 116.562 29.5572 117.375 28.7031  c
117.640 28.7031 l
117.682 28.7031 117.718 28.7187 117.750 28.7500  c
117.781 28.7812 117.796 28.8177 117.796 28.8593  c
117.796 40.7031 l
117.796 41.1197 118.614 41.3281 120.250 41.3281  c
120.250 42.0000 l
113.906 42.0000 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
198.248 45.1214 m
198.248 41.1214 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
203.906 42.4218 m
203.052 42.4218 202.349 42.2083 201.796 41.7812  c
201.244 41.3541 200.825 40.8020 200.539 40.1250  c
200.252 39.4479 200.054 38.7291 199.945 37.9687  c
199.835 37.2083 199.781 36.4218 199.781 35.6093  c
199.781 33.7343 200.065 32.1145 200.632 30.7500  c
201.200 29.3854 202.291 28.7031 203.906 28.7031  c
205.000 28.7031 205.856 29.0599 206.476 29.7734  c
207.096 30.4869 207.505 31.3567 207.703 32.3828  c
207.901 33.4088 208.000 34.4843 208.000 35.6093  c
208.000 36.4218 207.950 37.2057 207.851 37.9609  c
207.752 38.7161 207.559 39.4322 207.273 40.1093  c
206.987 40.7864 206.565 41.3411 206.007 41.7734  c
205.450 42.2057 204.750 42.4218 203.906 42.4218  c
h
203.906 41.9375 m
204.479 41.9375 204.942 41.7005 205.296 41.2265  c
205.651 40.7526 205.906 40.1614 206.062 39.4531  c
206.218 38.7447 206.315 38.0599 206.351 37.3984  c
206.388 36.7369 206.406 36.0364 206.406 35.2968  c
206.406 34.2968 206.364 33.3750 206.281 32.5312  c
206.197 31.6875 205.968 30.9166 205.593 30.2187  c
205.218 29.5208 204.656 29.1718 203.906 29.1718  c
203.145 29.1718 202.578 29.5208 202.203 30.2187  c
201.828 30.9166 201.599 31.6875 201.515 32.5312  c
201.432 33.3750 201.390 34.2968 201.390 35.2968  c
201.390 36.0364 201.406 36.7369 201.437 37.3984  c
201.468 38.0599 201.567 38.7474 201.734 39.4609  c
201.901 40.1744 202.158 40.7656 202.507 41.2343  c
202.856 41.7031 203.322 41.9375 203.906 41.9375  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
291.372 45.1214 m
291.372 41.1214 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
293.906 42.0000 m
293.906 41.3281 l
295.531 41.3281 296.343 41.1197 296.343 40.7031  c
296.343 30.1093 l
295.645 30.4635 294.791 30.6406 293.781 30.6406  c
293.781 29.9843 l
295.364 29.9843 296.562 29.5572 297.375 28.7031  c
297.640 28.7031 l
297.682 28.7031 297.718 28.7187 297.750 28.7500  c
297.781 28.7812 297.796 28.8177 297.796 28.8593  c
297.796 40.7031 l
297.796 41.1197 298.614 41.3281 300.250 41.3281  c
300.250 42.0000 l
293.906 42.0000 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
384.496 45.1214 m
384.496 41.1214 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
385.984 42.0000 m
385.984 41.4687 l
385.984 41.4479 386.000 41.4218 386.031 41.3906  c
389.046 38.0000 l
389.724 37.2395 390.252 36.6224 390.632 36.1484  c
391.013 35.6744 391.346 35.1276 391.632 34.5078  c
391.919 33.8880 392.062 33.2447 392.062 32.5781  c
392.062 31.6927 391.820 30.9349 391.335 30.3046  c
390.851 29.6744 390.177 29.3593 389.312 29.3593  c
388.708 29.3593 388.171 29.5599 387.703 29.9609  c
387.234 30.3619 386.911 30.8697 386.734 31.4843  c
386.786 31.4739 386.864 31.4687 386.968 31.4687  c
387.145 31.4687 387.309 31.5104 387.460 31.5937  c
387.612 31.6770 387.729 31.7942 387.812 31.9453  c
387.895 32.0963 387.937 32.2604 387.937 32.4375  c
387.937 32.6041 387.895 32.7656 387.812 32.9218  c
387.729 33.0781 387.612 33.2005 387.460 33.2890  c
387.309 33.3776 387.145 33.4218 386.968 33.4218  c
386.687 33.4218 386.453 33.3229 386.265 33.1250  c
386.078 32.9270 385.984 32.6979 385.984 32.4375  c
385.984 31.9270 386.075 31.4505 386.257 31.0078  c
386.440 30.5651 386.703 30.1640 387.046 29.8046  c
387.390 29.4453 387.781 29.1718 388.218 28.9843  c
388.656 28.7968 389.125 28.7031 389.625 28.7031  c
390.385 28.7031 391.083 28.8619 391.718 29.1796  c
392.354 29.4974 392.859 29.9505 393.234 30.5390  c
393.609 31.1276 393.796 31.8072 393.796 32.5781  c
393.796 33.1718 393.674 33.7213 393.429 34.2265  c
393.184 34.7317 392.875 35.1953 392.500 35.6171  c
392.125 36.0390 391.617 36.5364 390.976 37.1093  c
390.335 37.6822 389.921 38.0572 389.734 38.2343  c
387.437 40.5000 l
389.484 40.5000 l
390.411 40.5000 391.187 40.4921 391.812 40.4765  c
392.437 40.4609 392.765 40.4322 392.796 40.3906  c
392.953 40.2239 393.114 39.6145 393.281 38.5625  c
393.796 38.5625 l
393.281 42.0000 l
385.984 42.0000 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
58.5620 45.1214 m
58.5620 43.1214 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
151.686 45.1214 m
151.686 43.1214 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
244.810 45.1214 m
244.810 43.1214 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
337.934 45.1214 m
337.934 43.1214 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
Q
2 J
0 j
q
0 J
1 j
newpath
198.248 353.000 m
198.248 45.1214 l
S
Q
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
157 191 8 19 rc
Q
cliprestore
newpath
0 0 m
0 357.000 l
390.000 357.000 l
390.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
0 w
1.00000 w
2 J
0 j
newpath
198.248 312.237 m
194.248 312.237 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
174 307 10 21 rc
newpath
190.593 318.515 m
177.406 318.515 l
177.406 317.484 l
190.593 317.484 l
190.593 318.515 l
h
f
Q
newpath
190.484 323.546 m
190.484 322.567 190.593 321.606 190.812 320.664  c
191.031 319.721 191.351 318.794 191.773 317.882  c
192.195 316.971 192.682 316.109 193.234 315.296  c
195.109 312.625 l
192.703 312.625 l
191.692 312.625 190.851 312.630 190.179 312.640  c
189.507 312.651 189.140 312.677 189.078 312.718  c
188.921 312.906 188.765 313.520 188.609 314.562  c
188.078 314.562 l
188.703 310.484 l
189.218 310.484 l
189.218 310.546 l
189.218 310.932 190.421 311.125 192.828 311.125  c
196.500 311.125 l
196.500 311.593 l
196.500 311.656 196.489 311.687 196.468 311.687  c
193.781 315.546 l
193.093 316.557 192.661 317.679 192.484 318.914  c
192.307 320.148 192.218 321.692 192.218 323.546  c
192.218 323.786 192.135 323.992 191.968 324.164  c
191.802 324.335 191.599 324.421 191.359 324.421  c
191.109 324.421 190.901 324.335 190.734 324.164  c
190.567 323.992 190.484 323.786 190.484 323.546  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
198.248 268.349 m
194.248 268.349 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
174 263 10 21 rc
newpath
190.593 274.515 m
177.406 274.515 l
177.406 273.484 l
190.593 273.484 l
190.593 274.515 l
h
f
Q
newpath
188.468 277.765 m
188.229 277.161 188.062 276.513 187.968 275.820  c
187.875 275.127 187.828 274.375 187.828 273.562  c
187.828 272.791 187.940 271.997 188.164 271.179  c
188.388 270.362 188.716 269.619 189.148 268.953  c
189.580 268.286 190.122 267.744 190.773 267.328  c
191.424 266.911 192.161 266.703 192.984 266.703  c
193.692 266.703 194.286 266.885 194.765 267.250  c
195.244 267.614 195.484 268.151 195.484 268.859  c
195.484 269.015 195.445 269.161 195.367 269.296  c
195.289 269.432 195.184 269.536 195.054 269.609  c
194.924 269.682 194.781 269.718 194.625 269.718  c
194.364 269.718 194.151 269.635 193.984 269.468  c
193.817 269.302 193.734 269.099 193.734 268.859  c
193.734 268.609 193.820 268.401 193.992 268.234  c
194.164 268.067 194.375 267.984 194.625 267.984  c
194.635 267.984 194.651 267.984 194.671 267.984  c
194.692 267.984 194.708 267.989 194.718 268.000  c
194.406 267.500 193.828 267.250 192.984 267.250  c
192.338 267.250 191.757 267.476 191.242 267.929  c
190.726 268.382 190.333 268.932 190.062 269.578  c
189.718 270.432 189.546 271.703 189.546 273.390  c
189.765 272.828 190.101 272.362 190.554 271.992  c
191.007 271.622 191.520 271.437 192.093 271.437  c
192.687 271.437 193.221 271.559 193.695 271.804  c
194.169 272.049 194.575 272.380 194.914 272.796  c
195.252 273.213 195.513 273.690 195.695 274.226  c
195.877 274.763 195.968 275.317 195.968 275.890  c
195.968 276.692 195.796 277.437 195.453 278.125  c
195.109 278.812 194.625 279.367 194.000 279.789  c
193.375 280.210 192.671 280.421 191.890 280.421  c
191.099 280.421 190.408 280.171 189.820 279.671  c
189.231 279.171 188.781 278.536 188.468 277.765  c
h
191.906 279.796 m
192.583 279.796 193.093 279.606 193.437 279.226  c
193.781 278.846 194.000 278.382 194.093 277.835  c
194.187 277.289 194.234 276.651 194.234 275.921  c
194.234 275.859 l
194.234 275.307 194.216 274.833 194.179 274.437  c
194.143 274.041 194.057 273.648 193.921 273.257  c
193.786 272.867 193.562 272.546 193.250 272.296  c
192.937 272.046 192.520 271.921 192.000 271.921  c
191.447 271.921 190.992 272.101 190.632 272.460  c
190.273 272.820 190.007 273.270 189.835 273.812  c
189.664 274.354 189.578 274.901 189.578 275.453  c
189.578 275.630 189.583 275.765 189.593 275.859  c
189.593 275.869 189.593 275.882 189.593 275.898  c
189.593 275.914 189.588 275.932 189.578 275.953  c
189.578 276.536 189.643 277.119 189.773 277.703  c
189.903 278.286 190.143 278.781 190.492 279.187  c
190.841 279.593 191.312 279.796 191.906 279.796  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
198.248 224.462 m
194.248 224.462 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
174 219 10 21 rc
newpath
190.593 230.515 m
177.406 230.515 l
177.406 229.484 l
190.593 229.484 l
190.593 230.515 l
h
f
Q
newpath
188.687 233.640 m
188.666 233.619 188.656 233.609 188.656 233.609  c
188.656 233.609 188.651 233.609 188.640 233.609  c
188.828 234.244 189.190 234.768 189.726 235.179  c
190.263 235.591 190.859 235.796 191.515 235.796  c
192.036 235.796 192.463 235.684 192.796 235.460  c
193.130 235.237 193.393 234.937 193.585 234.562  c
193.778 234.187 193.911 233.773 193.984 233.320  c
194.057 232.867 194.093 232.411 194.093 231.953  c
194.093 231.380 194.078 230.906 194.046 230.531  c
194.015 230.156 193.927 229.796 193.781 229.453  c
193.625 229.088 193.403 228.770 193.117 228.500  c
192.830 228.229 192.500 228.093 192.125 228.093  c
191.645 228.093 191.247 228.164 190.929 228.304  c
190.612 228.445 190.362 228.601 190.179 228.773  c
189.997 228.945 189.828 229.132 189.671 229.335  c
189.515 229.539 189.411 229.645 189.359 229.656  c
189.140 229.656 l
189.036 229.656 188.984 229.593 188.984 229.468  c
188.984 222.859 l
188.984 222.817 189.000 222.781 189.031 222.750  c
189.062 222.718 189.099 222.703 189.140 222.703  c
189.203 222.703 l
190.099 223.130 191.031 223.343 192.000 223.343  c
192.979 223.343 193.921 223.130 194.828 222.703  c
194.875 222.703 l
194.916 222.703 194.953 222.713 194.984 222.734  c
195.015 222.755 195.031 222.781 195.031 222.812  c
195.031 223.046 l
195.031 223.057 195.026 223.072 195.015 223.093  c
195.005 223.114 195.000 223.130 195.000 223.140  c
194.552 223.682 194.000 224.109 193.343 224.421  c
192.687 224.734 192.000 224.890 191.281 224.890  c
190.687 224.890 190.125 224.807 189.593 224.640  c
189.593 228.656 l
189.927 228.322 190.309 228.067 190.742 227.890  c
191.174 227.713 191.635 227.625 192.125 227.625  c
192.677 227.625 193.182 227.750 193.640 228.000  c
194.099 228.250 194.487 228.583 194.804 229.000  c
195.122 229.416 195.367 229.885 195.539 230.406  c
195.710 230.927 195.796 231.447 195.796 231.968  c
195.796 232.750 195.609 233.484 195.234 234.171  c
194.859 234.859 194.343 235.406 193.687 235.812  c
193.031 236.218 192.307 236.421 191.515 236.421  c
190.859 236.421 190.260 236.252 189.718 235.914  c
189.177 235.575 188.752 235.125 188.445 234.562  c
188.138 234.000 187.984 233.390 187.984 232.734  c
187.984 232.474 188.070 232.255 188.242 232.078  c
188.414 231.901 188.635 231.812 188.906 231.812  c
189.166 231.812 189.385 231.901 189.562 232.078  c
189.739 232.255 189.828 232.474 189.828 232.734  c
189.828 232.994 189.739 233.213 189.562 233.390  c
189.385 233.567 189.166 233.656 188.906 233.656  c
188.864 233.645 188.828 233.640 188.796 233.640  c
188.765 233.640 188.729 233.640 188.687 233.640  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
198.248 180.574 m
194.248 180.574 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
174 175 10 21 rc
newpath
190.593 186.515 m
177.406 186.515 l
177.406 185.484 l
190.593 185.484 l
190.593 186.515 l
h
f
Q
newpath
190.859 192.000 m
190.859 191.328 l
192.130 191.328 192.765 191.119 192.765 190.703  c
192.765 188.671 l
187.531 188.671 l
187.531 188.015 l
193.609 178.796 l
193.651 178.734 193.708 178.703 193.781 178.703  c
194.078 178.703 l
194.192 178.703 194.250 178.765 194.250 178.890  c
194.250 188.015 l
196.234 188.015 l
196.234 188.671 l
194.250 188.671 l
194.250 190.703 l
194.250 190.974 194.442 191.145 194.828 191.218  c
195.213 191.291 195.656 191.328 196.156 191.328  c
196.156 192.000 l
190.859 192.000 l
h
188.140 188.015 m
192.859 188.015 l
192.859 180.812 l
188.140 188.015 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
198.248 136.687 m
194.248 136.687 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
174 131 10 21 rc
newpath
190.593 142.515 m
177.406 142.515 l
177.406 141.484 l
190.593 141.484 l
190.593 142.515 l
h
f
Q
newpath
188.687 146.187 m
188.958 146.708 189.385 147.106 189.968 147.382  c
190.552 147.658 191.166 147.796 191.812 147.796  c
192.593 147.796 193.156 147.468 193.500 146.812  c
193.843 146.156 194.015 145.401 194.015 144.546  c
194.015 144.026 193.945 143.515 193.804 143.015  c
193.664 142.515 193.427 142.101 193.093 141.773  c
192.760 141.445 192.333 141.281 191.812 141.281  c
190.406 141.281 l
190.312 141.281 190.265 141.234 190.265 141.140  c
190.265 140.921 l
190.265 140.838 190.312 140.796 190.406 140.796  c
191.546 140.718 l
192.015 140.718 192.411 140.541 192.734 140.187  c
193.057 139.833 193.291 139.398 193.437 138.882  c
193.583 138.367 193.656 137.885 193.656 137.437  c
193.656 136.812 193.500 136.291 193.187 135.875  c
192.875 135.458 192.416 135.250 191.812 135.250  c
191.281 135.250 190.770 135.349 190.281 135.546  c
189.791 135.744 189.416 136.046 189.156 136.453  c
189.187 136.442 189.244 136.437 189.328 136.437  c
189.588 136.437 189.809 136.531 189.992 136.718  c
190.174 136.906 190.265 137.130 190.265 137.390  c
190.265 137.651 190.174 137.875 189.992 138.062  c
189.809 138.250 189.588 138.343 189.328 138.343  c
189.057 138.343 188.828 138.250 188.640 138.062  c
188.453 137.875 188.359 137.651 188.359 137.390  c
188.359 136.828 188.531 136.341 188.875 135.929  c
189.218 135.518 189.658 135.210 190.195 135.007  c
190.731 134.804 191.276 134.703 191.828 134.703  c
192.380 134.703 192.932 134.809 193.484 135.023  c
194.036 135.237 194.497 135.549 194.867 135.960  c
195.237 136.372 195.421 136.864 195.421 137.437  c
195.421 137.989 195.291 138.513 195.031 139.007  c
194.770 139.502 194.416 139.924 193.968 140.273  c
193.520 140.622 193.041 140.869 192.531 141.015  c
193.145 141.109 193.713 141.317 194.234 141.640  c
194.755 141.963 195.174 142.380 195.492 142.890  c
195.809 143.401 195.968 143.953 195.968 144.546  c
195.968 145.265 195.776 145.921 195.390 146.515  c
195.005 147.109 194.492 147.575 193.851 147.914  c
193.210 148.252 192.536 148.421 191.828 148.421  c
191.171 148.421 190.533 148.289 189.914 148.023  c
189.294 147.757 188.791 147.377 188.406 146.882  c
188.020 146.388 187.828 145.812 187.828 145.156  c
187.828 144.854 187.924 144.609 188.117 144.421  c
188.309 144.234 188.557 144.140 188.859 144.140  c
189.046 144.140 189.218 144.182 189.375 144.265  c
189.531 144.349 189.653 144.468 189.742 144.625  c
189.830 144.781 189.875 144.958 189.875 145.156  c
189.875 145.458 189.776 145.708 189.578 145.906  c
189.380 146.104 189.140 146.203 188.859 146.203  c
188.776 146.203 188.718 146.197 188.687 146.187  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
198.248 92.7995 m
194.248 92.7995 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
174 87 10 21 rc
newpath
190.593 98.5156 m
177.406 98.5156 l
177.406 97.4843 l
190.593 97.4843 l
190.593 98.5156 l
h
f
Q
newpath
187.984 104.000 m
187.984 103.468 l
187.984 103.447 188.000 103.421 188.031 103.390  c
191.046 100.000 l
191.724 99.2395 192.252 98.6224 192.632 98.1484  c
193.013 97.6744 193.346 97.1276 193.632 96.5078  c
193.919 95.8880 194.062 95.2447 194.062 94.5781  c
194.062 93.6927 193.820 92.9349 193.335 92.3046  c
192.851 91.6744 192.177 91.3593 191.312 91.3593  c
190.708 91.3593 190.171 91.5599 189.703 91.9609  c
189.234 92.3619 188.911 92.8697 188.734 93.4843  c
188.786 93.4739 188.864 93.4687 188.968 93.4687  c
189.145 93.4687 189.309 93.5104 189.460 93.5937  c
189.612 93.6770 189.729 93.7942 189.812 93.9453  c
189.895 94.0963 189.937 94.2604 189.937 94.4375  c
189.937 94.6041 189.895 94.7656 189.812 94.9218  c
189.729 95.0781 189.612 95.2005 189.460 95.2890  c
189.309 95.3776 189.145 95.4218 188.968 95.4218  c
188.687 95.4218 188.453 95.3229 188.265 95.1250  c
188.078 94.9270 187.984 94.6979 187.984 94.4375  c
187.984 93.9270 188.075 93.4505 188.257 93.0078  c
188.440 92.5651 188.703 92.1640 189.046 91.8046  c
189.390 91.4453 189.781 91.1718 190.218 90.9843  c
190.656 90.7968 191.125 90.7031 191.625 90.7031  c
192.385 90.7031 193.083 90.8619 193.718 91.1796  c
194.354 91.4974 194.859 91.9505 195.234 92.5390  c
195.609 93.1276 195.796 93.8072 195.796 94.5781  c
195.796 95.1718 195.674 95.7213 195.429 96.2265  c
195.184 96.7317 194.875 97.1953 194.500 97.6171  c
194.125 98.0390 193.617 98.5364 192.976 99.1093  c
192.335 99.6822 191.921 100.057 191.734 100.234  c
189.437 102.500 l
191.484 102.500 l
192.411 102.500 193.187 102.492 193.812 102.476  c
194.437 102.460 194.765 102.432 194.796 102.390  c
194.953 102.224 195.114 101.614 195.281 100.562  c
195.796 100.562 l
195.281 104.000 l
187.984 104.000 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
198.248 48.9120 m
194.248 48.9120 l
S
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
198.248 334.181 m
196.248 334.181 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
198.248 290.293 m
196.248 290.293 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
198.248 246.406 m
196.248 246.406 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
198.248 202.518 m
196.248 202.518 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
198.248 158.630 m
196.248 158.630 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
198.248 114.743 m
196.248 114.743 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
q
0 w
1.00000 w
2 J
0 j
newpath
198.248 70.8558 m
196.248 70.8558 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 w
0 J
1 j
Q
Q
2 J
0 j
Q
Q
cliprestore
0 0 400 400 rc
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
cliprestore
1.00000 w
2 J
0 j
end end restore showpage

%%Trailer
%%EOF
